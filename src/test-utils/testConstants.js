import {
  CLI_DEFAULTS,
  DEFAULT_APNEA_CLUSTER_GAP_SEC as APNEA_GAP_DEFAULT_SEC,
  DEFAULT_FLG_BRIDGE_THRESHOLD as FLG_BRIDGE_THRESHOLD_DEFAULT,
  LOESS_SAMPLE_STEPS,
  NUMERIC_TOLERANCE,
  STL_SEASON_LENGTH,
  DAYS_PER_WEEK,
} from '../constants';

export const LINEAR_SERIES_LENGTH = 20;
export const LINEAR_SERIES = Array.from(
  { length: LINEAR_SERIES_LENGTH },
  (_, index) => index,
);

const LOESS_SAMPLE_INTERVAL = Math.floor(LINEAR_SERIES_LENGTH / 4);
export const LOESS_SAMPLE_POINTS = Object.freeze([
  0,
  LOESS_SAMPLE_INTERVAL,
  LOESS_SAMPLE_INTERVAL * 2,
  LOESS_SAMPLE_INTERVAL * 3,
  LINEAR_SERIES_LENGTH - 1,
]);

export const SMALL_SAMPLE_SIZE = APNEA_GAP_DEFAULT_SEC;
export const DEFAULT_KAPLAN_MEIER_DATA = Object.freeze([1, 1, 2, 3]);

export const LOESS_BANDWIDTH = 0.4;
export const STRICT_LINEAR_TOLERANCE = NUMERIC_TOLERANCE * 1e6;
export const RUNNING_QUANTILE_WINDOW = DAYS_PER_WEEK + 4;

export const RUNNING_QUANTILE_SERIES_LENGTH = RUNNING_QUANTILE_WINDOW * 3 - 3;
const RUNNING_QUANTILE_INTERVAL = RUNNING_QUANTILE_WINDOW - 1;
export const RUNNING_QUANTILE_SAMPLE_POINTS = Object.freeze([
  0,
  RUNNING_QUANTILE_INTERVAL,
  RUNNING_QUANTILE_INTERVAL * 2,
  RUNNING_QUANTILE_SERIES_LENGTH - 1,
]);
export const RUNNING_QUANTILE_MEDIAN = 0.5;
export const RUNNING_QUANTILE_HIGH = 0.9;

export const STL_TREND_MEAN_ABS_ERROR_LIMIT = 0.25;
export const STL_SEASONAL_PATTERN_DIFF_LIMIT = 0.3;
export const STL_RESIDUAL_MEAN_ABS_LIMIT = 0.6;

export const DEFAULT_CHANGE_POINT_WINDOW = 8;

export const DEFAULT_APNEA_CLUSTER_GAP_SEC = APNEA_GAP_DEFAULT_SEC;
export const DEFAULT_FLG_BRIDGE_THRESHOLD = FLG_BRIDGE_THRESHOLD_DEFAULT;
export const DEFAULT_FALLBACK_LOESS_STEPS = LOESS_SAMPLE_STEPS;
export const DEFAULT_CLI_OPTIONS = CLI_DEFAULTS;
export { STL_SEASON_LENGTH };
